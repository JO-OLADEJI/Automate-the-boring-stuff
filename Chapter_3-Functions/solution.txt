1. Why are functions advantageous to have in your programs?
- They allow you to group or compartmentalize your code which improves reusability

2. When does the code in a function execute: when the function is defined or when the function is called?
- When the function is called

3. What statement creates a function?
- The keyword "def"

4. What is the difference between a function and a function call?
- A function is a logical group of code while a function call is the execution of that code group

5. How many global scopes are there in a Python program? How many local scopes?
- There is just one (1) global scope
- There can be multiple local scopes

6. What happens to variables in a local scope when the function call returns?
- The variables are destroyed

7. What is a return value? Can a return value be part of an expression?
- A return value is what a function expression(s) evaluates to
- Yes

8. If a function does not have a return statement, what is the return value of a call to that function?
- None

9. How can you force a variable in a function to refer to the global variable?
-   Using the keyword "global" then the variable name

10. What is the data type of None?
- NoneType

11. What does the import areallyourpetsnamederic statement do? 
- It makes available all the functions in that module

12. If you had a function named bacon() in a module named spam, how would you call it after importing spam?
- spam.bacon()

13. How can you prevent a program from crashing when it gets an error?
- You can catch errors with a try and except block

14. What goes in the try clause? What goes in the except clause?
- try clause: the error prone code
- except clause: logic of what to happen should an error occur